// Generated by ChatGPT
using UnityEngine;
using UnityEngine.Rendering;

[ExecuteAlways]
[DisallowMultipleComponent]
public class ColliderVisualizer : MonoBehaviour
{
    [Header("Visual")]
    [SerializeField] private bool visible = true;
    [SerializeField] private Color color = new Color(0f, 1f, 1f, 0.25f); // 반투명
    [Tooltip("씬/런타임에서 콜라이더 변경 시 자동 재생성")]
    [SerializeField] private bool autoUpdate = true;

    [Header("Render Order")]
    [SerializeField] private string sortingLayerName = "Default";
    [SerializeField] private int sortingOrder = 0;

    private MeshFilter _mf;
    private MeshRenderer _mr;
    private Collider2D _col;
    private Mesh _mesh;
    private Material _mat;

    private static readonly int _ColorID = Shader.PropertyToID("_Color");

    private void OnEnable()
    {
        _col = GetComponent<Collider2D>();
        if (_col == null)
        {
            LogManager.LogWarning("[ColliderVisualizer] Collider2D가 필요합니다.");
            enabled = false;
            return;
        }

        EnsureRenderer();
        Rebuild();
        ApplyVisual();
    }

    private void OnDisable()
    {
        if (!Application.isPlaying)
        {
            if (_mat != null)
            {
                DestroyImmediate(_mat);
            }
        }
    }

    private void OnValidate()
    {
        if (!isActiveAndEnabled)
        {
            return;
        }

        EnsureRenderer();
        ApplyVisual();
        if (autoUpdate)
        {
            Rebuild();
        }
    }

    private void Update()
    {
        if (_mr != null)
        {
            if (_mr.enabled != visible)
            {
                _mr.enabled = visible;
            }
        }

        if (!autoUpdate)
        {
            return;
        }
        // 필요 시 외부에서 Rebuild() 호출 권장
    }

    [ContextMenu("Rebuild Collider Visual")]
    public void Rebuild()
    {
        if (_col == null)
        {
            return;
        }

        if (_col is EdgeCollider2D)
        {
            ClearMesh();
            return;
        }

        // 월드 메시 생성 후 로컬로 역변환
        var worldMesh = _col.CreateMesh(true, true);
        if (worldMesh == null || worldMesh.vertexCount == 0)
        {
            ClearMesh();
            return;
        }

        if (_mesh == null)
        {
            _mesh = new Mesh { name = "ColliderVisualizerMesh" };
            _mesh.MarkDynamic();
        }
        else
        {
            _mesh.Clear();
        }

        var verts = worldMesh.vertices;
        var w2l = transform.worldToLocalMatrix;
        for (var i = 0; i < verts.Length; i++)
        {
            verts[i] = w2l.MultiplyPoint3x4(verts[i]);
        }

        _mesh.vertices = verts;
        _mesh.triangles = worldMesh.triangles;
        _mesh.RecalculateBounds();

        _mf.sharedMesh = _mesh;

#if UNITY_EDITOR
        DestroyImmediate(worldMesh);
#else
        Destroy(worldMesh);
#endif

        ApplyVisual();
    }

    private void ApplyVisual()
    {
        if (_mr == null)
        {
            return;
        }

        _mr.enabled = visible;

        if (_mat == null)
        {
            var shader = Shader.Find("Sprites/Default");
            if (shader == null)
            {
                LogManager.LogWarning("[ColliderVisualizer] Sprites/Default 셰이더를 찾을 수 없습니다. Unlit/Color로 대체합니다.");
                shader = Shader.Find("Unlit/Color");
            }

            _mat = new Material(shader)
            {
                hideFlags = HideFlags.HideAndDontSave
            };
        }

        if (_mat.HasProperty(_ColorID))
        {
            _mat.SetColor(_ColorID, color);
        }
        else
        {
            _mat.color = color;
        }

        _mr.sharedMaterial = _mat;
        _mr.sortingLayerName = sortingLayerName;
        _mr.sortingOrder = sortingOrder;

        _mr.shadowCastingMode = ShadowCastingMode.Off;
        _mr.receiveShadows = false;
        _mr.lightProbeUsage = LightProbeUsage.Off;
        _mr.reflectionProbeUsage = ReflectionProbeUsage.Off;
        _mr.motionVectorGenerationMode = MotionVectorGenerationMode.ForceNoMotion;
    }

    private void EnsureRenderer()
    {
        _mf = GetComponent<MeshFilter>();
        if (_mf == null)
        {
            _mf = gameObject.AddComponent<MeshFilter>();
        }

        _mr = GetComponent<MeshRenderer>();
        if (_mr == null)
        {
            _mr = gameObject.AddComponent<MeshRenderer>();
        }
    }

    private void ClearMesh()
    {
        if (_mesh != null)
        {
            _mesh.Clear();
        }

        if (_mf != null)
        {
            _mf.sharedMesh = null;
        }

        if (_mr != null)
        {
            _mr.enabled = false;
        }
    }

#if UNITY_EDITOR
    private void OnDrawGizmosSelected()
    {
        if (!autoUpdate && visible)
        {
            if (_mesh == null || _mf.sharedMesh == null)
            {
                Rebuild();
            }
        }
    }
#endif
}
